{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastVector This is a simple vector python package.","title":"Start"},{"location":"#fastvector","text":"This is a simple vector python package.","title":"FastVector"},{"location":"api/","text":"References Vector Class VectorND Source code in fastvector/vector.py @total_ordering class VectorND : def __init__ ( self , * args : Any , dtype : Dtype = float64 ) -> None : \"\"\"Create a vector with the given values. Args: args (Any): The vector values. dtype (Dtype): The data type of the array.array. Raises: TypeError: If x or y are not a number. \"\"\" if len ( args ) == 1 and isinstance ( args [ 0 ], list ): self . values = array . array ( dtype , args [ 0 ]) elif len ( args ) > 1 : inputs = [ val for val in args ] self . values = array . array ( dtype , inputs ) else : raise TypeError ( 'You must pass in int/float value for x and y!' ) def __repr__ ( self ) -> str : \"\"\"Return the vector representation. Returns: The representation of the vector. \"\"\" return f 'vector.VectorND( { self . values } )' def __str__ ( self ) -> str : \"\"\"The vector as a string. Returns: The vector as a string. \"\"\" return f '( { self . values } )' def __abs__ ( self ) -> float : \"\"\"Return the length (magnitude) of the vector. Returns: Length of the vector. \"\"\" return sqrt ( sum ( pow ( val , 2 ) for val in self . values )) def __eq__ ( self , other_vector : object ) -> bool : \"\"\"Check if the vectors have the same values. Args: other_vector: Other vector (rhs) Returns: True, if the both vectors have the same values. False, else. \"\"\" if not isinstance ( other_vector , VectorND ): return False return self . values == other_vector . values def __lt__ ( self , other_vector : VectorND ) -> bool : \"\"\"Check if the self is less than the other vector. Args: other_vector: Other vector (rhs). Returns: True, if the self is less than the other vector. False, else. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) return abs ( self ) < abs ( other_vector ) def __add__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Returns the additon vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The additon vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) result = [ v1 + v2 for v1 , v2 in zip ( self . values , other_vector . values )] return VectorND ( result ) def __sub__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Return the subtraction vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The subtraction vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) result = [ v1 - v2 for v1 , v2 in zip ( self . values , other_vector . values )] return VectorND ( result ) def __mul__ ( self , other : Union [ VectorND , Number ] ) -> Union [ VectorND , Number ]: \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs) Raises: TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if isinstance ( other , VectorND ): return sum ([ v1 * v2 for v1 , v2 in zip ( self . values , other . values )]) if not isinstance ( other , int ) and not isinstance ( other , float ): raise TypeError ( 'You must pass in an int/float!' ) return VectorND ([ v * other for v in self . values ]) def __truediv__ ( self , other : Number ) -> VectorND : \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if not isinstance ( other , int ) and not isinstance ( other , float ): raise TypeError ( 'You must pass in an int/float!' ) return VectorND ([ v / other for v in self . values ]) def __len__ ( self ) -> int : \"\"\"Returns the length of the vector. Returns: int: The length. \"\"\" return len ( self . values ) def __getitem__ ( self , idx : int ) -> Number : \"\"\"Returns the i-th component of the vector. Args: idx (int): i-th component index Returns: Number: The value at the i-th component \"\"\" result : Number = self . values [ idx ] return result def __setitem__ ( self , idx : int , val : Number ) -> None : \"\"\"Updates the i-th component of the vector. Args: idx (int): i-th component index val (Number): The updated valued \"\"\" self . values [ idx ] = val __abs__ ( self ) special Return the length (magnitude) of the vector. Returns: Type Description float Length of the vector. Source code in fastvector/vector.py def __abs__ ( self ) -> float : \"\"\"Return the length (magnitude) of the vector. Returns: Length of the vector. \"\"\" return sqrt ( sum ( pow ( val , 2 ) for val in self . values )) __add__ ( self , other_vector ) special Returns the additon vector of the self and the other vector. Parameters: Name Type Description Default other_vector VectorND Other vector (rhs). required Returns: Type Description VectorND The additon vector of the self and the other vector. Source code in fastvector/vector.py def __add__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Returns the additon vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The additon vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) result = [ v1 + v2 for v1 , v2 in zip ( self . values , other_vector . values )] return VectorND ( result ) __eq__ ( self , other_vector ) special Check if the vectors have the same values. Parameters: Name Type Description Default other_vector object Other vector (rhs) required Returns: Type Description bool True, if the both vectors have the same values. False, else. Source code in fastvector/vector.py def __eq__ ( self , other_vector : object ) -> bool : \"\"\"Check if the vectors have the same values. Args: other_vector: Other vector (rhs) Returns: True, if the both vectors have the same values. False, else. \"\"\" if not isinstance ( other_vector , VectorND ): return False return self . values == other_vector . values __ge__ ( self , other , NotImplemented = NotImplemented ) special Return a >= b. Computed by @total_ordering from (not a < b). Source code in fastvector/vector.py def _ge_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a >= b. Computed by @total_ordering from (not a < b).' op_result = type ( self ) . __lt__ ( self , other ) if op_result is NotImplemented : return op_result return not op_result __getitem__ ( self , idx ) special Returns the i-th component of the vector. Parameters: Name Type Description Default idx int i-th component index required Returns: Type Description Number The value at the i-th component Source code in fastvector/vector.py def __getitem__ ( self , idx : int ) -> Number : \"\"\"Returns the i-th component of the vector. Args: idx (int): i-th component index Returns: Number: The value at the i-th component \"\"\" result : Number = self . values [ idx ] return result __gt__ ( self , other , NotImplemented = NotImplemented ) special Return a > b. Computed by @total_ordering from (not a < b) and (a != b). Source code in fastvector/vector.py def _gt_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a > b. Computed by @total_ordering from (not a < b) and (a != b).' op_result = type ( self ) . __lt__ ( self , other ) if op_result is NotImplemented : return op_result return not op_result and self != other __init__ ( self , * args , * , dtype = 'd' ) special Create a vector with the given values. Parameters: Name Type Description Default args Any The vector values. () dtype Dtype The data type of the array.array. 'd' Exceptions: Type Description TypeError If x or y are not a number. Source code in fastvector/vector.py def __init__ ( self , * args : Any , dtype : Dtype = float64 ) -> None : \"\"\"Create a vector with the given values. Args: args (Any): The vector values. dtype (Dtype): The data type of the array.array. Raises: TypeError: If x or y are not a number. \"\"\" if len ( args ) == 1 and isinstance ( args [ 0 ], list ): self . values = array . array ( dtype , args [ 0 ]) elif len ( args ) > 1 : inputs = [ val for val in args ] self . values = array . array ( dtype , inputs ) else : raise TypeError ( 'You must pass in int/float value for x and y!' ) __le__ ( self , other , NotImplemented = NotImplemented ) special Return a <= b. Computed by @total_ordering from (a < b) or (a == b). Source code in fastvector/vector.py def _le_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a <= b. Computed by @total_ordering from (a < b) or (a == b).' op_result = type ( self ) . __lt__ ( self , other ) if op_result is NotImplemented : return op_result return op_result or self == other __len__ ( self ) special Returns the length of the vector. Returns: Type Description int The length. Source code in fastvector/vector.py def __len__ ( self ) -> int : \"\"\"Returns the length of the vector. Returns: int: The length. \"\"\" return len ( self . values ) __lt__ ( self , other_vector ) special Check if the self is less than the other vector. Parameters: Name Type Description Default other_vector VectorND Other vector (rhs). required Returns: Type Description bool True, if the self is less than the other vector. False, else. Source code in fastvector/vector.py def __lt__ ( self , other_vector : VectorND ) -> bool : \"\"\"Check if the self is less than the other vector. Args: other_vector: Other vector (rhs). Returns: True, if the self is less than the other vector. False, else. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) return abs ( self ) < abs ( other_vector ) __mul__ ( self , other ) special Return the multiplication of self and the other vector/number. Parameters: Name Type Description Default other Union[VectorND, Number] Other vector or scaler value (rhs) required Exceptions: Type Description TypeError Not int/float passed in. Returns: Type Description Union[VectorND, Number] The multiplication of self and the other vector/number. Source code in fastvector/vector.py def __mul__ ( self , other : Union [ VectorND , Number ] ) -> Union [ VectorND , Number ]: \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs) Raises: TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if isinstance ( other , VectorND ): return sum ([ v1 * v2 for v1 , v2 in zip ( self . values , other . values )]) if not isinstance ( other , int ) and not isinstance ( other , float ): raise TypeError ( 'You must pass in an int/float!' ) return VectorND ([ v * other for v in self . values ]) __repr__ ( self ) special Return the vector representation. Returns: Type Description str The representation of the vector. Source code in fastvector/vector.py def __repr__ ( self ) -> str : \"\"\"Return the vector representation. Returns: The representation of the vector. \"\"\" return f 'vector.VectorND( { self . values } )' __setitem__ ( self , idx , val ) special Updates the i-th component of the vector. Parameters: Name Type Description Default idx int i-th component index required val Number The updated valued required Source code in fastvector/vector.py def __setitem__ ( self , idx : int , val : Number ) -> None : \"\"\"Updates the i-th component of the vector. Args: idx (int): i-th component index val (Number): The updated valued \"\"\" self . values [ idx ] = val __str__ ( self ) special The vector as a string. Returns: Type Description str The vector as a string. Source code in fastvector/vector.py def __str__ ( self ) -> str : \"\"\"The vector as a string. Returns: The vector as a string. \"\"\" return f '( { self . values } )' __sub__ ( self , other_vector ) special Return the subtraction vector of the self and the other vector. Parameters: Name Type Description Default other_vector VectorND Other vector (rhs). required Returns: Type Description VectorND The subtraction vector of the self and the other vector. Source code in fastvector/vector.py def __sub__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Return the subtraction vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The subtraction vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) result = [ v1 - v2 for v1 , v2 in zip ( self . values , other_vector . values )] return VectorND ( result ) __truediv__ ( self , other ) special Return the multiplication of self and the other vector/number. Parameters: Name Type Description Default other Number Other vector or scaler value (rhs). required Exceptions: Type Description ValueError Division by zero. TypeError Not int/float passed in. Returns: Type Description VectorND The multiplication of self and the other vector/number. Source code in fastvector/vector.py def __truediv__ ( self , other : Number ) -> VectorND : \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if not isinstance ( other , int ) and not isinstance ( other , float ): raise TypeError ( 'You must pass in an int/float!' ) return VectorND ([ v / other for v in self . values ])","title":"API"},{"location":"api/#references","text":"","title":"References"},{"location":"api/#vector-class","text":"","title":"Vector Class"},{"location":"api/#fastvector.vector.VectorND","text":"Source code in fastvector/vector.py @total_ordering class VectorND : def __init__ ( self , * args : Any , dtype : Dtype = float64 ) -> None : \"\"\"Create a vector with the given values. Args: args (Any): The vector values. dtype (Dtype): The data type of the array.array. Raises: TypeError: If x or y are not a number. \"\"\" if len ( args ) == 1 and isinstance ( args [ 0 ], list ): self . values = array . array ( dtype , args [ 0 ]) elif len ( args ) > 1 : inputs = [ val for val in args ] self . values = array . array ( dtype , inputs ) else : raise TypeError ( 'You must pass in int/float value for x and y!' ) def __repr__ ( self ) -> str : \"\"\"Return the vector representation. Returns: The representation of the vector. \"\"\" return f 'vector.VectorND( { self . values } )' def __str__ ( self ) -> str : \"\"\"The vector as a string. Returns: The vector as a string. \"\"\" return f '( { self . values } )' def __abs__ ( self ) -> float : \"\"\"Return the length (magnitude) of the vector. Returns: Length of the vector. \"\"\" return sqrt ( sum ( pow ( val , 2 ) for val in self . values )) def __eq__ ( self , other_vector : object ) -> bool : \"\"\"Check if the vectors have the same values. Args: other_vector: Other vector (rhs) Returns: True, if the both vectors have the same values. False, else. \"\"\" if not isinstance ( other_vector , VectorND ): return False return self . values == other_vector . values def __lt__ ( self , other_vector : VectorND ) -> bool : \"\"\"Check if the self is less than the other vector. Args: other_vector: Other vector (rhs). Returns: True, if the self is less than the other vector. False, else. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) return abs ( self ) < abs ( other_vector ) def __add__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Returns the additon vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The additon vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) result = [ v1 + v2 for v1 , v2 in zip ( self . values , other_vector . values )] return VectorND ( result ) def __sub__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Return the subtraction vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The subtraction vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) result = [ v1 - v2 for v1 , v2 in zip ( self . values , other_vector . values )] return VectorND ( result ) def __mul__ ( self , other : Union [ VectorND , Number ] ) -> Union [ VectorND , Number ]: \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs) Raises: TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if isinstance ( other , VectorND ): return sum ([ v1 * v2 for v1 , v2 in zip ( self . values , other . values )]) if not isinstance ( other , int ) and not isinstance ( other , float ): raise TypeError ( 'You must pass in an int/float!' ) return VectorND ([ v * other for v in self . values ]) def __truediv__ ( self , other : Number ) -> VectorND : \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if not isinstance ( other , int ) and not isinstance ( other , float ): raise TypeError ( 'You must pass in an int/float!' ) return VectorND ([ v / other for v in self . values ]) def __len__ ( self ) -> int : \"\"\"Returns the length of the vector. Returns: int: The length. \"\"\" return len ( self . values ) def __getitem__ ( self , idx : int ) -> Number : \"\"\"Returns the i-th component of the vector. Args: idx (int): i-th component index Returns: Number: The value at the i-th component \"\"\" result : Number = self . values [ idx ] return result def __setitem__ ( self , idx : int , val : Number ) -> None : \"\"\"Updates the i-th component of the vector. Args: idx (int): i-th component index val (Number): The updated valued \"\"\" self . values [ idx ] = val","title":"VectorND"},{"location":"api/#fastvector.vector.VectorND.__abs__","text":"Return the length (magnitude) of the vector. Returns: Type Description float Length of the vector. Source code in fastvector/vector.py def __abs__ ( self ) -> float : \"\"\"Return the length (magnitude) of the vector. Returns: Length of the vector. \"\"\" return sqrt ( sum ( pow ( val , 2 ) for val in self . values ))","title":"__abs__()"},{"location":"api/#fastvector.vector.VectorND.__add__","text":"Returns the additon vector of the self and the other vector. Parameters: Name Type Description Default other_vector VectorND Other vector (rhs). required Returns: Type Description VectorND The additon vector of the self and the other vector. Source code in fastvector/vector.py def __add__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Returns the additon vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The additon vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) result = [ v1 + v2 for v1 , v2 in zip ( self . values , other_vector . values )] return VectorND ( result )","title":"__add__()"},{"location":"api/#fastvector.vector.VectorND.__eq__","text":"Check if the vectors have the same values. Parameters: Name Type Description Default other_vector object Other vector (rhs) required Returns: Type Description bool True, if the both vectors have the same values. False, else. Source code in fastvector/vector.py def __eq__ ( self , other_vector : object ) -> bool : \"\"\"Check if the vectors have the same values. Args: other_vector: Other vector (rhs) Returns: True, if the both vectors have the same values. False, else. \"\"\" if not isinstance ( other_vector , VectorND ): return False return self . values == other_vector . values","title":"__eq__()"},{"location":"api/#fastvector.vector.VectorND.__ge__","text":"Return a >= b. Computed by @total_ordering from (not a < b). Source code in fastvector/vector.py def _ge_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a >= b. Computed by @total_ordering from (not a < b).' op_result = type ( self ) . __lt__ ( self , other ) if op_result is NotImplemented : return op_result return not op_result","title":"__ge__()"},{"location":"api/#fastvector.vector.VectorND.__getitem__","text":"Returns the i-th component of the vector. Parameters: Name Type Description Default idx int i-th component index required Returns: Type Description Number The value at the i-th component Source code in fastvector/vector.py def __getitem__ ( self , idx : int ) -> Number : \"\"\"Returns the i-th component of the vector. Args: idx (int): i-th component index Returns: Number: The value at the i-th component \"\"\" result : Number = self . values [ idx ] return result","title":"__getitem__()"},{"location":"api/#fastvector.vector.VectorND.__gt__","text":"Return a > b. Computed by @total_ordering from (not a < b) and (a != b). Source code in fastvector/vector.py def _gt_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a > b. Computed by @total_ordering from (not a < b) and (a != b).' op_result = type ( self ) . __lt__ ( self , other ) if op_result is NotImplemented : return op_result return not op_result and self != other","title":"__gt__()"},{"location":"api/#fastvector.vector.VectorND.__init__","text":"Create a vector with the given values. Parameters: Name Type Description Default args Any The vector values. () dtype Dtype The data type of the array.array. 'd' Exceptions: Type Description TypeError If x or y are not a number. Source code in fastvector/vector.py def __init__ ( self , * args : Any , dtype : Dtype = float64 ) -> None : \"\"\"Create a vector with the given values. Args: args (Any): The vector values. dtype (Dtype): The data type of the array.array. Raises: TypeError: If x or y are not a number. \"\"\" if len ( args ) == 1 and isinstance ( args [ 0 ], list ): self . values = array . array ( dtype , args [ 0 ]) elif len ( args ) > 1 : inputs = [ val for val in args ] self . values = array . array ( dtype , inputs ) else : raise TypeError ( 'You must pass in int/float value for x and y!' )","title":"__init__()"},{"location":"api/#fastvector.vector.VectorND.__le__","text":"Return a <= b. Computed by @total_ordering from (a < b) or (a == b). Source code in fastvector/vector.py def _le_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a <= b. Computed by @total_ordering from (a < b) or (a == b).' op_result = type ( self ) . __lt__ ( self , other ) if op_result is NotImplemented : return op_result return op_result or self == other","title":"__le__()"},{"location":"api/#fastvector.vector.VectorND.__len__","text":"Returns the length of the vector. Returns: Type Description int The length. Source code in fastvector/vector.py def __len__ ( self ) -> int : \"\"\"Returns the length of the vector. Returns: int: The length. \"\"\" return len ( self . values )","title":"__len__()"},{"location":"api/#fastvector.vector.VectorND.__lt__","text":"Check if the self is less than the other vector. Parameters: Name Type Description Default other_vector VectorND Other vector (rhs). required Returns: Type Description bool True, if the self is less than the other vector. False, else. Source code in fastvector/vector.py def __lt__ ( self , other_vector : VectorND ) -> bool : \"\"\"Check if the self is less than the other vector. Args: other_vector: Other vector (rhs). Returns: True, if the self is less than the other vector. False, else. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) return abs ( self ) < abs ( other_vector )","title":"__lt__()"},{"location":"api/#fastvector.vector.VectorND.__mul__","text":"Return the multiplication of self and the other vector/number. Parameters: Name Type Description Default other Union[VectorND, Number] Other vector or scaler value (rhs) required Exceptions: Type Description TypeError Not int/float passed in. Returns: Type Description Union[VectorND, Number] The multiplication of self and the other vector/number. Source code in fastvector/vector.py def __mul__ ( self , other : Union [ VectorND , Number ] ) -> Union [ VectorND , Number ]: \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs) Raises: TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if isinstance ( other , VectorND ): return sum ([ v1 * v2 for v1 , v2 in zip ( self . values , other . values )]) if not isinstance ( other , int ) and not isinstance ( other , float ): raise TypeError ( 'You must pass in an int/float!' ) return VectorND ([ v * other for v in self . values ])","title":"__mul__()"},{"location":"api/#fastvector.vector.VectorND.__repr__","text":"Return the vector representation. Returns: Type Description str The representation of the vector. Source code in fastvector/vector.py def __repr__ ( self ) -> str : \"\"\"Return the vector representation. Returns: The representation of the vector. \"\"\" return f 'vector.VectorND( { self . values } )'","title":"__repr__()"},{"location":"api/#fastvector.vector.VectorND.__setitem__","text":"Updates the i-th component of the vector. Parameters: Name Type Description Default idx int i-th component index required val Number The updated valued required Source code in fastvector/vector.py def __setitem__ ( self , idx : int , val : Number ) -> None : \"\"\"Updates the i-th component of the vector. Args: idx (int): i-th component index val (Number): The updated valued \"\"\" self . values [ idx ] = val","title":"__setitem__()"},{"location":"api/#fastvector.vector.VectorND.__str__","text":"The vector as a string. Returns: Type Description str The vector as a string. Source code in fastvector/vector.py def __str__ ( self ) -> str : \"\"\"The vector as a string. Returns: The vector as a string. \"\"\" return f '( { self . values } )'","title":"__str__()"},{"location":"api/#fastvector.vector.VectorND.__sub__","text":"Return the subtraction vector of the self and the other vector. Parameters: Name Type Description Default other_vector VectorND Other vector (rhs). required Returns: Type Description VectorND The subtraction vector of the self and the other vector. Source code in fastvector/vector.py def __sub__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Return the subtraction vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The subtraction vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , VectorND ): raise TypeError ( 'You must pass in a VectorND instance!' ) result = [ v1 - v2 for v1 , v2 in zip ( self . values , other_vector . values )] return VectorND ( result )","title":"__sub__()"},{"location":"api/#fastvector.vector.VectorND.__truediv__","text":"Return the multiplication of self and the other vector/number. Parameters: Name Type Description Default other Number Other vector or scaler value (rhs). required Exceptions: Type Description ValueError Division by zero. TypeError Not int/float passed in. Returns: Type Description VectorND The multiplication of self and the other vector/number. Source code in fastvector/vector.py def __truediv__ ( self , other : Number ) -> VectorND : \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if not isinstance ( other , int ) and not isinstance ( other , float ): raise TypeError ( 'You must pass in an int/float!' ) return VectorND ([ v / other for v in self . values ])","title":"__truediv__()"}]}